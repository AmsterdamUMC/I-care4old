levels(mydata$iK2a_r) <- c("no",  "yes")
attr(mydata$iK2a_r, "label") <- "Weight loss"
###### CODES FOR FREQUENCIES OF THE STUDY SAMPLE FOR WOUND CARE & TURNING PROGRAME
frequencies_iN2k_r <- summary(mydata$iN2k_r)
frequencies_iN2n_r <- summary(mydata$iN2n_r)
###### CODES FOR USE BOTH THERAPIES OF THE STUDY SAMPLE FOR WOUND CARE & TURNING PROGRAME
crosstab_both_therapies <- table(mydata$iN2n_r, mydata$iN2k_r)
chi_squared_both_therapies <- chisq.test(crosstab_both_therapies)
row_percentages_both_therapies <- prop.table(crosstab_both_therapies, margin = 1) * 100
print("Cross-tabulation:")
print(crosstab_both_therapies)
print("Row Percentages:")
print(row_percentages_both_therapies)
print("Chi-Squared Test Result:")
print(chi_squared_both_therapies)
###### CODES FOR CHARACTERISTICS OF THE STUDY SAMPLE FOR WOUND CARE & TURNING PROGRAM
## WOUND CARE
# Create 2x2 crosstabs and perform appropriate tests
variables_to_crosstab_wound_care_1 <- c("iA2", "age_r", "iA4_r", "sDRS_r", "iJ7", "iA13_r", "iN7_r",
"iH1_r", "iH3_r", "CPS_rec", "sCHESS_r", "BMI_r", "iC1_r")
results_list_1 <- list()
for (variable in variables_to_crosstab_wound_care_1) {
# Filter the data based on Assess_type == 1
filtered_data <- mydata[mydata$Assess_type == 1, ]
# Create a 2x2 crosstab
#crosstab_wound_care_1 <- table(mydata[[variable]], mydata$iN2k_r)
crosstab_wound_care_1 <- table(filtered_data[[variable]], filtered_data$iN2k_r)
# Calculate of percentages
row_percentages_wound_care_1 <- prop.table(crosstab_wound_care_1, margin = 1) * 100
# Display the title of a crosstab
cat("Cross-tabulation for variable:", variable, "vs iN2k_r:\n\n")
print(crosstab_wound_care_1)
cat("\nRow Percentages for", variable, "vs iN2k_r:\n")
print(row_percentages_wound_care_1)
# Initialize variables in case test conditions are not met
chi_squared_result_wound_care_1 <- NULL
fisher_result_wound_care_1 <- NULL
# Checking conditions for the chi-square test
if (min(crosstab_wound_care_1) >= 5 && nrow(crosstab_wound_care_1) >= 2 && ncol(crosstab_wound_care_1) >= 2) {
print("Chi-Squared Test conditions met.\n")
# Performing the chi-square test
chi_squared_result_wound_care_1 <- chisq.test(crosstab_wound_care_1)
print(paste("Chi-Squared Test Result for", variable, ":"))
print(chi_squared_result_wound_care_1)
} else {
print(paste("Chi-Squared Test for", variable, "not performed due to insufficient data."))
# Checking conditions for the Fisher test
if (min(crosstab_wound_care_1) < 5 && nrow(crosstab_wound_care_1) == 2 && ncol(crosstab_wound_care_1) == 2) {
print("Fisher's Test conditions met.\n")
# Performing the Fisher test
fisher_result_wound_care_1 <- fisher.test(crosstab_wound_care_1)
print("Fisher's Test Result:")
print(fisher_result_wound_care_1)
} else {
print(paste("Fisher's Test for", variable, "not performed due to insufficient data."))
# Checking conditions for the Likelihood Ratio Test
if (min(crosstab_wound_care_1) >= 1 && nrow(crosstab_wound_care_1) >= 2 && ncol(crosstab_wound_care_1) >= 2) {
print("Likelihood Ratio Test conditions met.\n")
obs <- crosstab_wound_care_1
expected <- chisq.test(crosstab_wound_care_1)$expected
# Calculate the test statistic for likelihood ratio test
lrtest_statistic <- 2 * sum(obs * log(obs / expected))
df <- (nrow(obs) - 1) * (ncol(obs) - 1)  # Degrees of freedom
# Calculate p-value for likelihood ratio test
p_value_lrtest <- 1 - pchisq(lrtest_statistic, df)
print(paste("Likelihood Ratio Test Statistic:", lrtest_statistic))
print(paste("Degrees of Freedom:", df))
print(paste("p-value:", p_value_lrtest))
} else {
print(paste("Likelihood Ratio Test for", variable, "not performed due to insufficient data."))
}
}
}
cat("\n")
variable_labels_1 <- c("Gender - Male", "Gender - Female", "Wiek 60-69", "Wiek 70-79", "Wiek 80-89", "Wiek 90+",
"Marital status - Never married", "Marital status - in relationship", "Marital status - was in relationship",
"Depression raiting scale - no depression", "Depression raiting scale - mild/moderate", "Depression raiting scale - severe",
"Self rated health - Excellent", "Self rated health - Good", "Self rated health - Fair", "Self rated health - Poor",
"Self rated health - No response", "Hospitalization - no", "Hospitalization - yes", "Number of physician visit - no",
"Number of physician visit - 1", "Number of physician visit - 2", "Number of physician visit - 3 or more",
"Bladder continence - continent", "Bladder continence - some problem", "Bladder continence - incontinent",
"Bowel continence - continent", "Bowel continence - some problem", "Bowel continence - incontinent",
"CPS - Cognitive Performance Scale - none", "CPS - Cognitive Performance Scale - mild",
"CPS - Cognitive Performance Scale - moderate", "CPS - Cognitive Performance Scale - severe", "sCHESS - 0-1",
"sCHESS - 2-5", "BMI_category <23", "BMI_category - 24-30", "BMI_category >30", "Coma - no", "Coma - yes")
result_1 <- list(
Variable = variable,
Crosstab = crosstab_wound_care_1,
RowPercentages = row_percentages_wound_care_1,
ChiSquared = ifelse(!is.null(chi_squared_result_wound_care_1), chi_squared_result_wound_care_1$statistic, NA),
ChiSquared_df = ifelse(!is.null(chi_squared_result_wound_care_1), chi_squared_result_wound_care_1$parameter, NA),
ChiSquared_p_value= ifelse(!is.null(chi_squared_result_wound_care_1), chi_squared_result_wound_care_1$p.value, NA),
Fisher_p_value = ifelse(!is.null(fisher_result_wound_care_1), fisher_result_wound_care_1$p.value, NA),
LikelihoodRatio = ifelse((is.null(chi_squared_result_wound_care_1) &&
is.null(fisher_result_wound_care_1)), lrtest_statistic, NA),
LikelihoodRatio_p_value = ifelse((is.null(chi_squared_result_wound_care_1) &&
is.null(fisher_result_wound_care_1)), p_value_lrtest, NA)
)
results_list_1[[variable]] <- result_1
}
result_1 <- bind_rows(results_list_1)
result_1$Labels <- variable_labels_1
## Create the output folder: Please create a folder named
# !Note: Please change to your own path
# Save the result to a CSV file
write.csv(result_1, "C:/Users/BARANSKAI/Desktop/wyniki_WC/results_of_cross_analysis_wound_care_1.csv", row.names = TRUE)
##TURNING PROGRAME
#Create 2x2 crosstabs and perform appropriate tests
variables_to_crosstab_turning_programe_1 <- c("iA2", "age_r", "iA4_r", "sDRS_r", "iJ7", "iA13_r", "iN7_r",
"iH1_r", "iH3_r", "CPS_rec", "BMI_r")
results_list_2 <- list()
for (variable in variables_to_crosstab_turning_programe_1) {
# Filter the data based on Assess_type == 1
filtered_data <- mydata[mydata$Assess_type == 1, ]
# Create a 2x2 crosstab
#crosstab_turning_programe_1 <- table(mydata[[variable]], mydata$iN2n_r)
crosstab_turning_programe_1 <- table(filtered_data[[variable]], filtered_data$iN2n_r)
# Calculate of percentages
row_percentages_turning_programe_1 <- prop.table(crosstab_turning_programe_1, margin = 1) * 100
# Display the title of a crosstab
cat("Cross-tabulation for variable:", variable, "vs iN2n_r:\n\n")
print(crosstab_turning_programe_1)
cat("\nRow Percentages for", variable, "vs iN2n_r:\n")
print(row_percentages_turning_programe_1)
# Initialize variables in case test conditions are not met
chi_squared_result_turning_programe_1 <- NULL
fisher_result_turning_programe_1 <- NULL
# Checking conditions for the chi-square test
if (min(crosstab_turning_programe_1) >= 5 && nrow(crosstab_turning_programe_1) >= 2 && ncol(crosstab_turning_programe_1) >= 2) {
print("Chi-Squared Test conditions met.\n")
# Performing the chi-square test
chi_squared_result_turning_programe_1 <- chisq.test(crosstab_turning_programe_1)
print(paste("Chi-Squared Test Result for", variable, ":"))
print(chi_squared_result_turning_programe_1)
} else {
print(paste("Chi-Squared Test for", variable, "not performed due to insufficient data."))
# Checking conditions for the Fisher test
if (min(crosstab_turning_programe_1) < 5 && nrow(crosstab_turning_programe_1) == 2 && ncol(crosstab_turning_programe_1) == 2) {
print("Fisher's Test conditions met.\n")
# Performing the Fisher test
fisher_result_turning_programe_1 <- fisher.test(crosstab_turning_programe_1)
print("Fisher's Test Result:")
print(fisher_result_turning_programe_1)
} else {
print(paste("Fisher's Test for", variable, "not performed due to insufficient data."))
# Checking conditions for the Likelihood Ratio Test
if (min(crosstab_turning_programe_1) >= 1 && nrow(crosstab_turning_programe_1) >= 2 && ncol(crosstab_turning_programe_1) >= 2) {
print("Likelihood Ratio Test conditions met.\n")
# Performing the Likelihood Ratio Test
obs <- crosstab_turning_programe_1
expected <- chisq.test(crosstab_turning_programe_1)$expected
# Calculate the Likelihood Ratio Test statistic
lrtest_statistic <- 2 * sum(obs * log(obs / expected))
df <- (nrow(obs) - 1) * (ncol(obs) - 1)  # Degrees of freedom
# Calculate p-value for Likelihood Ratio Test
p_value_lrtest <- 1 - pchisq(lrtest_statistic, df)
print(paste("Likelihood Ratio Test Statistic:", lrtest_statistic))
print(paste("Degrees of Freedom:", df))
print(paste("p-value:", p_value_lrtest))
} else {
print(paste("Likelihood Ratio Test for", variable, "not performed due to insufficient data."))
}
}
}
cat("\n")
variable_labels_2 <- c("Gender - Male", "Gender - Female", "Wiek 60-69", "Wiek 70-79", "Wiek 80-89", "Wiek 90+",
"Marital status - Never married", "Marital status - in relationship", "Marital status - was in relationship",
"Depression raiting scale - no depression", "Depression raiting scale - mild/moderate", "Depression raiting scale - severe",
"Self rated health - Excellent", "Self rated health - Good", "Self rated health - Fair", "Self rated health - Poor",
"Self rated health - No response", "Hospitalization - no", "Hospitalization - yes", "Number of physician visit - no",
"Number of physician visit - 1", "Number of physician visit - 2", "Number of physician visit - 3 or more",
"Bladder continence - continent", "Bladder continence - some problem", "Bladder continence - incontinent",
"Bowel continence - continent", "Bowel continence - some problem", "Bowel continence - incontinent",
"CPS - Cognitive Performance Scale - none", "CPS - Cognitive Performance Scale - mild",
"CPS - Cognitive Performance Scale - moderate", "CPS - Cognitive Performance Scale - severe",
"BMI_category <23", "BMI_category - 24-30", "BMI_category >30")
result_2 <- list(
Variable = variable,
Crosstab = crosstab_turning_programe_1,
RowPercentages = row_percentages_turning_programe_1,
ChiSquared = ifelse(!is.null(chi_squared_result_turning_programe_1), chi_squared_result_turning_programe_1$statistic, NA),
ChiSquared_df = ifelse(!is.null(chi_squared_result_turning_programe_1), chi_squared_result_turning_programe_1$parameter, NA),
ChiSquared_p_value= ifelse(!is.null(chi_squared_result_turning_programe_1), chi_squared_result_turning_programe_1$p.value, NA),
Fisher_p_value = ifelse(!is.null(fisher_result_turning_programe_1), fisher_result_turning_programe_1$p.value, NA),
LikelihoodRatio = ifelse((is.null(chi_squared_result_turning_programe_1) &&
is.null(fisher_result_turning_programe_1)), lrtest_statistic, NA),
LikelihoodRatio_p_value = ifelse((is.null(chi_squared_result_turning_programe_1) &&
is.null(fisher_result_turning_programe_1)), p_value_lrtest, NA)
)
results_list_2[[variable]] <- result_2
}
result_2 <- bind_rows(results_list_2)
result_2$Labels <- variable_labels_2
## Create the output folder: Please create a folder named
# !Note: Please change to your own path
# Save the result to a CSV file
write.csv(result_2, "C:/Users/BARANSKAI/Desktop/wyniki_WC/results_of_cross_analysis_turning_programe_1.csv", row.names = TRUE)
######CODES FOR CROSS TABLES FOR WOUND CARE & TURNING PROGRAME
##WOUND CARE
#Create 2x2 crosstabs and perform appropriate tests
variables_to_crosstab_wound_care_2 <- c("iL1_r", "iL2", "iL3", "iL4", "iL5", "iL6", "iL7", "sADLH", "ADL_r", "iK2a_r", "iJ6c",
"iI1a_r", "iI1b_r", "iI1s_r", "iI1t_r", "iI1e_r", "iI1g_r", "iI1i_r", "age_r")
results_list_3 <- list()
for (variable in variables_to_crosstab_wound_care_2) {
#Filter the data based on Assess_type == 1
filtered_data <- mydata[mydata$Assess_type == 1, ]
#Create a 2x2 crosstab
#crosstab_wound_care_2 <- table(mydata[[variable]], mydata$iN2k_r)
crosstab_wound_care_2 <- table(filtered_data[[variable]], filtered_data$iN2k_r)
#Calculate of percentages
row_percentages_wound_care_2 <- prop.table(crosstab_wound_care_2, margin = 1) * 100
#Display the title of a crosstab
cat("Cross-tabulation for variable:", variable, "vs iN2k_r:\n\n")
print(crosstab_wound_care_2)
cat("\nRow Percentages for", variable, "vs iN2k_r:\n")
print(row_percentages_wound_care_2)
#Initialize variables in case test conditions are not met
chi_squared_result_wound_care_2 <- NULL
fisher_result_wound_care_2 <- NULL
#Checking conditions for the chi-square test
if (min(crosstab_wound_care_2) >= 5 && nrow(crosstab_wound_care_2) >= 2 && ncol(crosstab_wound_care_2) >= 2) {
print("Chi-Squared Test conditions met.\n")
# Performing the chi-square test
chi_squared_result_wound_care_2 <- chisq.test(crosstab_wound_care_2)
print(paste("Chi-Squared Test Result for", variable, ":"))
print(chi_squared_result_wound_care_2)
} else {
print(paste("Chi-Squared Test for", variable, "not performed due to insufficient data."))
# Checking conditions for the Fisher test
if (min(crosstab_wound_care_2) < 5 && nrow(crosstab_wound_care_2) == 2 && ncol(crosstab_wound_care_2) == 2) {
print("Fisher's Test conditions met.\n")
# Performing the Fisher test
fisher_result_wound_care_2 <- fisher.test(crosstab_wound_care_2)
print("Fisher's Test Result:")
print(fisher_result_wound_care_2)
} else {
print(paste("Fisher's Test for", variable, "not performed due to insufficient data."))
# Checking conditions for the Likelihood Ratio Test
if (min(crosstab_wound_care_2) >= 1 && nrow(crosstab_wound_care_2) >= 2 && ncol(crosstab_wound_care_2) >= 2) {
print("Likelihood Ratio Test conditions met.\n")
obs <- crosstab_wound_care_2
expected <- chisq.test(crosstab_wound_care_2)$expected
# Calculate the test statistic for likelihood ratio test
lrtest_statistic <- 2 * sum(obs * log(obs / expected))
df <- (nrow(obs) - 1) * (ncol(obs) - 1)  # Degrees of freedom
# Calculate p-value for likelihood ratio test
p_value_lrtest <- 1 - pchisq(lrtest_statistic, df)
print(paste("Likelihood Ratio Test Statistic:", lrtest_statistic))
print(paste("Degrees of Freedom:", df))
print(paste("p-value:", p_value_lrtest))
} else {
print(paste("Likelihood Ratio Test for", variable, "not performed due to insufficient data."))
}
}
}
cat("\n")
variable_labels_3 <- c("Most sever pressure ulcer - no", "Most sever pressure ulcer - yes",
"Prior pressure ulcer - no", "Prior pressure ulcer - yes", "Other skin ulcer - no", "Other skin ulcer - yes",
"Major skin problems - no", "Major skin problems - yes", "Skin tears - no", "Skin tears - yes",
"Other skin condition - no", "Other skin condition - yes", "Foot problem - no foot problems",
"Foot problem - problem, no limit walk", "Foot problem - problem, limits walking",
"Foot problem - problem, prevents walking", "Foot problem - problem, no walking for other reasons",
"sADL hierarchy scale 0-6 range - 0 - Independent", "sADL hierarchy scale 0-6 range - 1 - Supervision required",
"sADL hierarchy scale 0-6 range - 2 - Limited impairment",
"sADL hierarchy scale 0-6 range - 3 - Extensive Assistance Required - 1",
"sADL hierarchy scale 0-6 range - 4 - Extensive Assistance Required - 2",
"sADL hierarchy scale 0-6 range - 5 - Dependent", "sADL hierarchy scale 0-6 range - 6- Total Dependence",
"ADL - independent (0-1)", "ADL - moderately dependent (2-3)", "ADL - severely dependent (4-6)",
"Weight loss - no", "Weight loss - yes", "End stage disease - no", "End stage disease - yes",
"Hip fracture in last 30 days - no", "Hip fracture in last 30 days - yes", "Other fracture in last 30 days - no",
"Other fracture in last 30 days - yes", "Cancer - no", "Cancer - yes", "Diabetes mellitus - no",
"Diabetes mellitus - yes", "Hemiplegia - no", "Hemiplegia - yes", "Paraplegia - no", "Paraplegia - yes",
"Quadriplegia - no", "Quadriplegia - yes", "Wiek 60-69", "Wiek 70-79", "Wiek 80-89", "Wiek 90+")
result_3 <- list(
Variable = variable,
Crosstab = crosstab_wound_care_2,
RowPercentages = row_percentages_wound_care_2,
ChiSquared = ifelse(!is.null(chi_squared_result_wound_care_2), chi_squared_result_wound_care_2$statistic, NA),
ChiSquared_df = ifelse(!is.null(chi_squared_result_wound_care_2), chi_squared_result_wound_care_2$parameter, NA),
ChiSquared_p_value= ifelse(!is.null(chi_squared_result_wound_care_2), chi_squared_result_wound_care_2$p.value, NA),
Fisher_p_value = ifelse(!is.null(fisher_result_wound_care_2), fisher_result_wound_care_2$p.value, NA),
LikelihoodRatio = ifelse((is.null(chi_squared_result_wound_care_2) &&
is.null(fisher_result_wound_care_2)), lrtest_statistic, NA),
LikelihoodRatio_p_value = ifelse((is.null(chi_squared_result_wound_care_2) &&
is.null(fisher_result_wound_care_2)), p_value_lrtest, NA)
)
results_list_3[[variable]] <- result_3
}
result_3 <- bind_rows(results_list_3)
result_3$Labels <- variable_labels_3
## Create the output folder: Please create a folder named
# !Note: Please change to your own path
# Save the result to a CSV file
write.csv(result_3, "C:/Users/BARANSKAI/Desktop/wyniki_WC/results_of_cross_analysis_wound_care_2.csv", row.names = TRUE, append = TRUE)
##TURNING PROGRAME
# Create 2x2 crosstabs and perform appropriate tests
variables_to_crosstab_turning_programe_2 <- c("iL1_r", "iL2", "iI1e_r", "iI1g_r", "iI1i_r", "iC1_r", "iK2a_r", "iJ6c", "iI1a_r",
"iI1b_r", "iI1s_r", "iI1l_r", "iJ4_r", "iJ3_r", "sADLH", "ADL_r", "sCHESS_r", "sCHESS")
results_list_4 <- list()
for (variable in variables_to_crosstab_turning_programe_2) {
# Filter the data based on Assess_type == 1
filtered_data <- mydata[mydata$Assess_type == 1, ]
# Create a 2x2 crosstab
crosstab_turning_programe_2 <- table(filtered_data[[variable]], filtered_data$iN2n_r)
# Calculate of percentages
row_percentages_turning_programe_2 <- prop.table(crosstab_turning_programe_2, margin = 1) * 100
# Display the title of a crosstab
cat("Cross-tabulation for variable:", variable, "vs iN2n_r:\n\n")
print(crosstab_turning_programe_2)
cat("\nRow Percentages for", variable, "vs iN2n_r:\n")
print(row_percentages_turning_programe_2)
# Initialize variables in case test conditions are not met
chi_squared_result_turning_programe_2 <- NULL
fisher_result_turning_programe_2 <- NULL
# Checking conditions for the chi-square test
if (min(crosstab_turning_programe_2) >= 5 && nrow(crosstab_turning_programe_2) >= 2 && ncol(crosstab_turning_programe_2) >= 2) {
print("Chi-Squared Test conditions met.\n")
# Performing the chi-square test
chi_squared_result_turning_programe_2 <- chisq.test(crosstab_turning_programe_2)
print(paste("Chi-Squared Test Result for", variable, ":"))
print(chi_squared_result_turning_programe_2)
} else {
print(paste("Chi-Squared Test for", variable, "not performed due to insufficient data."))
# Checking conditions for the Fisher test
if (min(crosstab_turning_programe_2) < 5 && nrow(crosstab_turning_programe_2) == 2 && ncol(crosstab_turning_programe_2) == 2) {
print("Fisher's Test conditions met.\n")
# Performing the Fisher test
fisher_result_turning_programe_2 <- fisher.test(crosstab_turning_programe_2)
print("Fisher's Test Result:")
print(fisher_result_turning_programe_2)
} else {
print(paste("Fisher's Test for", variable, "not performed due to insufficient data."))
# Checking conditions for the Likelihood Ratio Test
if (min(crosstab_turning_programe_2) >= 1 && nrow(crosstab_turning_programe_2) >= 2 && ncol(crosstab_turning_programe_2) >= 2) {
print("Likelihood Ratio Test conditions met.\n")
# Performing the Likelihood Ratio Test
obs <- crosstab_turning_programe_2
expected <- chisq.test(crosstab_turning_programe_2)$expected
# Calculate the Likelihood Ratio Test statistic
lrtest_statistic <- 2 * sum(obs * log(obs / expected))
df <- (nrow(obs) - 1) * (ncol(obs) - 1)  # Degrees of freedom
# Calculate p-value for Likelihood Ratio Test
p_value_lrtest <- 1 - pchisq(lrtest_statistic, df)
print(paste("Likelihood Ratio Test Statistic:", lrtest_statistic))
print(paste("Degrees of Freedom:", df))
print(paste("p-value:", p_value_lrtest))
} else {
print(paste("Likelihood Ratio Test for", variable, "not performed due to insufficient data."))
}
}
}
cat("\n")
variable_labels_4 <- c("Most sever pressure ulcer - no", "Most sever pressure ulcer - yes",
"Prior pressure ulcer - no", "Prior pressure ulcer - yes", "Hemiplegia - no", "Hemiplegia - yes",
"Paraplegia - no", "Paraplegia - yes", "Quadriplegia - no", "Quadriplegia - yes", "Coma - no", "Coma - yes",
"Weight loss - no", "Weight loss - yes", "End stage disease - no", "End stage disease - yes",
"Hip fracture in last 30 days - no", "Hip fracture in last 30 days - yes", "Other fracture in last 30 days - no",
"Other fracture in last 30 days - yes", "Cancer - no", "Cancer - yes", "CHF - no", "CHF - yes", "Fatigue - no",
"Fatigue - yes", "Dyspne - no", "Dyspne - yes", "sADL hierarchy scale 0-6 range - 0 - Independent",
"sADL hierarchy scale 0-6 range - 1 - Supervision required",
"sADL hierarchy scale 0-6 range - 2 - Limited impairment",
"sADL hierarchy scale 0-6 range - 3 - Extensive Assistance Required - 1",
"sADL hierarchy scale 0-6 range - 4 - Extensive Assistance Required - 2",
"sADL hierarchy scale 0-6 range - 5 - Dependent", "sADL hierarchy scale 0-6 range - 6- Total Dependence",
"ADL - independent (0-1)", "ADL - moderately dependent (2-3)", "ADL - severely dependent (4-6)",
"sCHESS - 0-1", "sCHESS - 2-5", "sCHESS scale 0-5 range - 0 - No health instability",
"sCHESS scale 0-5 range - 1 - Minimal health instability",
"sCHESS scale 0-5 range - 2 - Low health instability",
"sCHESS scale 0-5 range - 3 - Moderate health instability",
"sCHESS scale 0-5 range - 4 - High health instability",
"sCHESS scale 0-5 range - Very high health instability")
result_4 <- list(
Variable = variable,
Crosstab = crosstab_turning_programe_2,
RowPercentages = row_percentages_turning_programe_2,
ChiSquared = ifelse(!is.null(chi_squared_result_turning_programe_2), chi_squared_result_turning_programe_2$statistic, NA),
ChiSquared_df = ifelse(!is.null(chi_squared_result_turning_programe_2), chi_squared_result_turning_programe_2$parameter, NA),
ChiSquared_p_value= ifelse(!is.null(chi_squared_result_turning_programe_2), chi_squared_result_turning_programe_2$p.value, NA),
Fisher_p_value = ifelse(!is.null(fisher_result_turning_programe_2), fisher_result_turning_programe_2$p.value, NA),
LikelihoodRatio = ifelse((is.null(chi_squared_result_turning_programe_2) &&
is.null(fisher_result_turning_programe_2)), lrtest_statistic, NA),
LikelihoodRatio_p_value = ifelse((is.null(chi_squared_result_turning_programe_2) &&
is.null(fisher_result_turning_programe_2)), p_value_lrtest, NA)
)
results_list_4[[variable]] <- result_4
}
result_4 <- bind_rows(results_list_4)
result_4$Labels <- variable_labels_4
## Create the output folder: Please create a folder named
# !Note: Please change to your own path
# Save the result to a CSV file
write.csv(result_4, "C:/Users/BARANSKAI/Desktop/wyniki_WC/results_of_cross_analysis_turning_programe_2.csv", row.names = TRUE)
###### CODES FOR DECISION TREES FOR WOUND CARE & TURNING PROGRAM
## WOUND CARE
mydata$iN2k_r <- factor(mydata$iN2k_r)
mydata$iL1_r <- factor(mydata$iL1_r)
mydata$iL2 <- factor(mydata$iL2)
mydata$iL3 <- factor(mydata$iL3)
mydata$iL4 <- factor(mydata$iL4)
mydata$iL5 <- factor(mydata$iL5)
mydata$iL6 <- factor(mydata$iL6)
mydata$iL7 <- factor(mydata$iL7)
mydata$sADLH <- factor(mydata$sADLH)
mydata$iK2a <- factor(mydata$iK2a)
mydata$iJ6c <- factor(mydata$iJ6c)
mydata$iI1a_r <- factor(mydata$iI1a_r)
mydata$iI1b_r <- factor(mydata$iI1b_r)
mydata$iI1s_r <- factor(mydata$iI1s_r)
mydata$iI1t_r <- factor(mydata$iI1t_r)
mydata$iI1e_r <- factor(mydata$iI1e_r)
mydata$iI1g_r <- factor(mydata$iI1g_r)
mydata$iI1i_r <- factor(mydata$iI1i_r)
mydata$age_r <- factor(mydata$age_r)
# Decision Tree
# Analysis of the decision tree
tree_result_wound_care <- rpart(iN2k_r ~ iL1_r + iL2 + iL3 + iL4 + iL5 + iL6 + iL7 + sADLH + iK2a + iJ6c +
iI1a_r + iI1b_r + iI1s_r + iI1t_r + iI1e_r + iI1g_r + iI1i_r + age_r,
data = mydata[mydata$Assess_type == 1, ], method = "class")
# Print result of the decision tree for Assess_type = 1
print("WOUND CARE - Decision Tree for Assess_type = 1:")
print(tree_result_wound_care)
## Create the output folder: Please create a folder named
# !Note: Please change to your own path
# Save the result to a png file
png("C:/Users/BARANSKAI/Desktop/wyniki_WC/Decision Tree Wound Care 1.png", width = 800, height = 600)
par(mfrow=c(1,2))
# Tree 1
prp(tree_result_wound_care, digits = 3, box.palette = "RdBu", type = 4, extra = 1)
# Tree 2
prp(tree_result_wound_care, type = 1, extra = 104, digits = 2)
dev.off()
##TURNING PROGRAME
mydata$iN2n_r <- factor(mydata$iN2n_r)
mydata$iC1_r <- factor(mydata$iC1_r)
mydata$iI1l_r <- factor(mydata$iI1l_r)
mydata$iJ4_r <- factor(mydata$iJ4_r)
mydata$iJ3_r <- factor(mydata$iJ3_r)
mydata$ADL_r <- factor(mydata$ADL_r)
mydata$sCHESS_r <- factor(mydata$sCHESS_r)
# Decision Tree
# Analysis of the decision tree
tree_result_turning_programe <- rpart(iN2n_r ~ iL1_r + iL2 + iI1e_r + iI1g_r + iI1i_r + iC1_r + iK2a + iJ6c +
iI1a_r + iI1b_r + iI1s_r + iI1l_r + iJ4_r + iJ3_r + ADL_r + sCHESS_r,
data = mydata[mydata$Assess_type == 1, ], method = "class")
# Print result of the decision tree for Assess_type = 1
print("TURNING PROGRAM - Decision Tree for Assess_type = 1:")
print(tree_result_turning_programe)
## Create the output folder: Please create a folder named
# !Note: Please change to your own path
# Save the result to a png file
png("C:/Users/BARANSKAI/Desktop/wyniki_WC/Decision Tree Turning Programe 1.png", width = 800, height = 600)
par(mfrow=c(1,2))
# Tree 1
prp(tree_result_turning_programe, digits = 3, box.palette = "RdBu", type = 4, extra = 1)
# Tree 2
prp(tree_result_turning_programe, type = 1, extra = 104, digits = 2)
dev.off()
###### CUSTOM TABLES FOR WOUND CARE & TURNING PROGRAM
## WOUND CARE
# Filter the data based on Assess_type == 1
filtered_data <- mydata[mydata$Assess_type == 1, ]
#data_subset <- mydata[ , c("sFI_corrected", "sBMI", "sADLH", "sADLLF", "sPAIN", "sPURS", "sDRS_r", "sCHESS", "sCPS")]
# Select the desired columns from the filtered data
data_subset <- filtered_data[, c("sFI_corrected", "sBMI", "sADLH", "sADLLF", "sPAIN", "sPURS", "sDRS_r", "sCHESS", "sCPS")]
# Group your data by the 'iN2k_r' variable and calculate the desired statistics
#result <- describeBy(data_subset, group = mydata$iN2k_r, mat = TRUE, digits = 2)
result <- describeBy(data_subset, group = filtered_data$iN2k_r, mat = TRUE, quant=c(0.25,0.75), digits = 2)
# Print the results
print(result)
## Create the output folder: Please create a folder named
# !Note: Please change to your own path
# Save the result to a CSV file
write.csv(result, file = "C:/Users/BARANSKAI/Desktop/wyniki_WC/ctable_wound_care.csv", row.names = TRUE)
## TURNING PROGRAME
# Filter the data based on Assess_type == 1
filtered_data <- mydata[mydata$Assess_type == 1, ]
#data_subset <- mydata[ , c("sFI_corrected", "sBMI", "sADLH", "sADLLF", "sPAIN", "sPURS", "sDRS_r", "sCHESS", "sCPS")]
# Select the desired columns from the filtered data
data_subset <- filtered_data[, c("sFI_corrected", "sBMI", "sADLH", "sADLLF", "sPAIN", "sPURS", "sDRS_r", "sCHESS", "sCPS")]
# Group your data by the 'iN2n_r' variable and calculate the desired statistics
#result <- describeBy(data_subset, group = mydata$iN2n_r, mat = TRUE, digits = 2)
result <- describeBy(data_subset, group = filtered_data$iN2n_r, mat = TRUE, quant=c(0.25,0.75), digits = 2)
#Print the results
print(result)
## Create the output folder: Please create a folder named
# !Note: Please change to your own path
# Save the result to a CSV file
write.csv(result, file = "C:/Users/BARANSKAI/Desktop/wyniki_WC/ctable_turning_programe.csv", row.names = TRUE)
######################################## MDS ##################################################################
###!Note:
## There are differences between countries (Finland, Canada and the USA) in terms of variable names,
## as well as their presence in the database
## The changes for Finland, Canada and USA are noted in the code and explained
#### The analysis requires the following variables;
# Please double check if the variable coding is consistent and modify if necessary
##Install packages
#install.packages(c("haven", "tidyr", "dplyr", "reshape2", "tableone", "summarytools", "rpart"))
library(haven); library(tidyr); library(dplyr); library(reshape2); library(tableone); library(summarytools); library(gmodels);
library(rpart); library(descr); library(rpart.plot); library(tree); library(partykit); library(data.tree); library(DiagrammeR);
library(ggplot2); library(prettyR); library(sjPlot); library(DescTools); library(psych); library(broom);
## Import your data
# !Note: Please change to your own path and/or format
data <- read_sav('C:/Users/BARANSKAI/Desktop/22.06. bez osób poniżej 60 roku życia SHELTER_meds_totalANONYM.sav')
## Select relevant variables for analysis
mydata <- data [ , c("age", "iN2k", "iN2n", "iL1", "iI1a", "iI1b", "iI1s", "iI1t", "iI1e", "iI1g", "iI1i", "iC1", "iI1l", "iJ3",
"iJ4", "iA13", "iN7", "sDRS", "iA4", "sCPS", "sCHESS", "sADLH", "sCPS", "iH1", "iH3", "iK1ab", "iK1bb", "iA2",
"iJ7", "iL2", "iL3", "iL4", "iL5", "iL6", "iL7", "iK2a", "iJ6c", "Assess_type", "sADLLF", "iG2a", "iG2d",
"iG2e", "iG2j", "iG2b", "iG2i", "iG6a", "iE2a", "iE2c", "iE1k", "iE1d", "iI1k", "iI1j", "iI1m", "iC2b", "iG2c",
"iG2b", "iG2h", "iG4", "iG12", "iJ5a", "iJ5b", "iG3", "sPAIN", "sPURS")]
## Wound care
mydata$iN2k_r <- ifelse(mydata$M5e == 1 | mydata$M5f == 1 | mydata$M5g == 1 | mydata$M5h == 1 | mydata$M6f == 1, 2,
ifelse(mydata$M5e == 0 & mydata$M5f == 0 & mydata$M5g == 0 & mydata$M5h == 0 & mydata$M6f == 0, 0, NA))
